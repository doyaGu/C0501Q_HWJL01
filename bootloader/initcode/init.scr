// ==============================================
// Enable timer 6 to measure booting time
// ==============================================
write(0xa494, 0x0000);                              // Diable timer 6
write(0xa462, 0x0000);                              // Clear timer 6 counter
write(0xa460, 0x0000);
write(0xa494, 0x000d);                              // Enable timer 6, one-shot mode

// ==============================================
// NOR clock div = WCLK/8 = (3+1)*2
// ==============================================
write(0x9c04, 0x0003);

// ==============================================
//            Engine & Clcok Setting
// ==============================================
// General reset register and General clock register
write(0x0012, 0x0008);                              // Enable MCLK for host
write(0x0014, 0xc001);                              // MCLK PLL1_OUT1 / 2 (Memory 160MHz)
write(0x0016, 0x102a);
// write(0x0018, 0xc001);                              // NCLK PLL1_OUT2 / 1 (AHB/RISC 160MHz)
write(0x0018, 0xc800);

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x001a, 0x0028);                          // Do not reset AHB on booting
} else {
    write(0x001a, 0x1028);
}

write(0x001c, 0xc003);                              // WCLK PLL1_OUT1 / 4 (APB 80MHz)

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x001e, 0x0aaa);                          // Do not reset APB on booting
} else {
    write(0x001e, 0x3aaa);
}

write(0x0020, 0x0a2a);                              // APB Clock

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x0022, 0x3c00);                          // APB Reset, do not reset NOR0, SDIP on booting
} else {
    write(0x0022, 0x3f00);
}

write(0x0024, 0x9000);                              // GCLK PLL1_OUT2 / 1 (2D 213MHz)
write(0x0026, 0x3000);                              // Disable 2D clock
write(0x0028, 0xc000);                              // DCLK PPL3_OUT1 (LCD)
write(0x002a, 0x3000);                              // Disable LCD clock
write(0x0030, 0x8001);                              // ICLK PLL1_OUT1 / 2 (ISP 160MHz)
write(0x0032, 0x7000);                              // Reset ISP, and disable clock
write(0x0034, 0x8001);                              // XCLK PLL1_OUT1 / 2 (Video 160MHz)
write(0x0036, 0xf000);                              // Reset Video & JPEG, and disable clock
write(0x0038, 0x9001);                              // JCLK PLL1_OUT2 / 2 (JPEG 106.5MHz)
write(0x003A, 0xa000);                              // AMCLK PLL2_OUT1     (Audio, run-time adjust sampling rate)
write(0x003C, 0x8000);                              // ZCLK  PLL2_OUT1 / 1 (Audio, run-time adjust sampling rate)
write(0x003e, 0x7000);                              // Reset IIS, and disable clock
write(0x0040, 0x8007);                              // PCLK PLL1_OUT1 / 8 (PCR 40MHz)
write(0x0042, 0x0000);                              // PCLK disable
write(0x0044, 0xf000);                              // Reset RISC and disable clock
write(0x0046, 0x100a);                              // Reset USB and enable clock
write(0x0048, 0x7000);                              // Reset TSI and disable clock
write(0x004c, 0xc000);                              // FCLK PLL1_OUT1 (ARM 320MHz)

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x004e, 0x003f);                          // Do not reset ARM on booting
} else {
    write(0x004e, 0x803f);
}

write(0x005c, 0x0400);                              // Reset TSO and disable clock
write(0x0060, 0x8000);                              // Reset MAC and disable clock
write(0x0062, 0x0008);                              // Reset CAP and disable clock
write(0x0064, 0x0000);                              // Disable CAPCLK

// Disable CLK Reset
write(0x0016, 0x002a);                              // Enable M1CLK/N2CLK/N10CLK Setting
write(0x001a, 0x0028);                              // Enable N1CLK Setting, Enable DPU clock
write(0x001e, 0x0aaa);                              // Enable W0CLK/W1CLK/W2CLK/W3CLk/W4CLK/W5CLK Setting
write(0x0020, 0x0a2a);                              // Enable W6CLK/W7CLK/W8CLK/W9CLk/W11CLK Setting, Disable W10CLK (KBC)
write(0x0022, 0x0000);                              // USB Clock Setting
write(0x0026, 0x0000);                              // Disable CQ
write(0x002a, 0x0000);                              // Disable DCLK LCD Clock Setting
write(0x0032, 0x0000);                              // Disable M5CLK/ICLK/I1CLK Clock Setting
write(0x0036, 0x0000);                              // Disable JPEG Clock Setting
write(0x003e, 0x0000);                              // Disable Audio DAC Clock Setting
write(0x0042, 0x0000);                              // Disable PCR Clock Setting
write(0x0044, 0x0000);                              // Disable RISC Clock Setting
write(0x0046, 0x0000);                              // Disable USB Clock Setting
write(0x0048, 0x0000);                              // Disable TSI Clock Setting
write(0x004e, 0x003a);                              // Enable ARM Clcok Setting
write(0x005c, 0x0400);                              // Disable TSO Clock Setting
write(0x0060, 0x0000);                              // Disable MAC Clock Setting
write(0x0062, 0x0000);                              // Disable TSP and CAPCLK(M17CLK)
write(0x0080, 0x018F);                              // PCR clock = 40M/400 = 100KHz

// SDCLK div = WCLK/4
write(0xb010, 0x000c);

// pull-up unused GPIO 82~97, 100~102 for IT9852 or IT9854
if (read_mask(0x0000, 0x6000)==0x4000) {            // IT9852
    write(0x8096, 0xfffc);                          // enable GPIO 82~95 pull-up
    write(0x809a, 0xfffc);                          // enable GPIO 82~95 pull-up
    write(0x80d4, 0x0073);                          // enable GPIO 96~97, 100~102 pull-up
    write(0x80d8, 0x0073);                          // enable GPIO 96~97, 100~102 pull-up
} else if (read_mask(0x0000, 0x6000)==0x0000) {     // IT9854
    write(0x8096, 0xfffc);                          // enable GPIO 82~95 pull-up
    write(0x809a, 0xfffc);                          // enable GPIO 82~95 pull-up
    write(0x80d4, 0x0073);                          // enable GPIO 96~97, 100~102 pull-up
    write(0x80d8, 0x0073);                          // enable GPIO 96~97, 100~102 pull-up
}

// Set Host clock to PLL2 temporary, and set it to PLL1_OUT2 latter
write(0x0010, 0x5000);                              // BCLK PLL2_OUT1 (Host 33MHz)

// ==============================================
// PLL1 640MHz ck1_n1=320MHz , ck1_n2=213MHz
// ==============================================
write(0x00a0, 0x450c);
write(0x00a2, 0x0302);
write(0x00a4, 0x2280);
write(0x00a4, 0x3280);
write(0x00a4, 0x2280);


// Set the host clock to PLL1_OUT2
write(0x0010, 0x4802);                              // BCLK PLL1_OUT2 / 3 (Host 64MHz)

// Host bus controller registers
write(0x0200, 0x0000);
write(0x0210, 0x0002);                              // Host_IO_Drv="01"
write(0x0214, 0x0c00);

// ==============================================
//              AHB Setting
// ==============================================
write(0x03da, 0x7508);                              // AHB Wrapper Setting
write(0x03de, 0x000f);                              // AHB time out


// ==============================================
//         Memory Setting for Winbond DDR2
// ==============================================
if (read_mask(0x0000, 0x1000)==0x0000) {
    // Memory IO strength Setting

    // Memory controller registers
    // select MA13 MA12 as bank address
    // linear mode, 512Mbits 4banks 16bits_BusWidth 10Bits_col_add(2KByte per page)
    if (read_mask(0x0000, 0x6000)==0x4000) {        // IT9852
        write(0x0300, 0x3298);
    } else {                                        // IT9854, IT9856, IT9866
        write(0x0300, 0x32a8);
    }
    write(0x030a, 0x0025);                          // Enable auto precharge, Turbo mode, RISC R/W merge
    write(0x0310, 0x1a22);
    write(0x0312, 0x6412);                          // B0DTWR, B0DTWTR, B0DTXP, B0DTRTW, B0DTRFC, B0DTRCD, B0DTRP
    write(0x0314, 0x0028);
    write(0x0316, 0x1000);                          // B0DTDQSMCLK=00, B0DTDQL=6
    write(0x0318, 0x2208);
    write(0x031a, 0x2000);                          // B0DTWL, B0DTEnCKGat, B0DTRAS
    write(0x031c, 0x6121);

// ==============================================
//         Memory Setting for Etron DDR2
// ==============================================
} else {
    // Memory IO strength Setting

    // Memory controller registers
    // select MA13 MA12 as bank address
    // linear mode, 512Mbits 4banks 16bits_BusWidth 10Bits_col_add(2KByte per page)
    if (read_mask(0x0000, 0x6000)==0x4000) {        // IT9852
        write(0x0300, 0x3298);
    } else {                                        // IT9854, IT9856, IT9866
        write(0x0300, 0x32a8);
    }
    write(0x030a, 0x0025);                          // Enable auto precharge, Turbo mode, RISC R/W merge
    write(0x0310, 0x1a22);
    write(0x0312, 0x6412);                          // B0DTWR, B0DTWTR, B0DTXP, B0DTRTW, B0DTRFC, B0DTRCD, B0DTRP
    write(0x0314, 0x0028);                          // B0DTDQSMCLK=00, B0DTDQL=6
    write(0x0316, 0x1000);
    write(0x0318, 0x2208);
    write(0x031a, 0x2000);                          // B0DTWL, B0DTEnCKGat, B0DTRAS
    write(0x031c, 0x6121);
}

// ==============================================
//              DDRPLL reset and start
// ==============================================
write(0x0340, 0x2a40);                              // Reset PLL
write(0x0340, 0x2a44);                              // Start PLL
write(0x0340, 0x3a44);                              // Update PLL
write(0x0340, 0x2a44);                              // Start PLL
write(0x0342, 0x0882);                              // DLL reset

// ==============================================
//      Open auto digital delay lock loop
// ==============================================
write(0x0320, 0x704a);                              // auto DDLL
write(0x0322, 0x0a4a);
write(0x0324, 0x0a4a);
write(0x0320, 0xf04a);                              // update phase from average compare cycle

// ==============================================
//         Memory Setting for Winbond DDR2
// ==============================================
if (read_mask(0x0000, 0x1000)==0x0000) {
    write(0x0348, 0xe002);                          // B0DTDQSI
    write(0x0334, 0x0000);                          // MCLKP Out Setting & MA &CMD
    write(0x0336, 0xc000);                          // ODT Enable & MDQS IO Driving
    write(0x0330, 0x8000);                          // IO Driving
    write(0x0332, 0x1400);                          // odt 150 ohm
    write(0x0396, 0xa000);                          // MAX GNT

    write(0x0338, 0x0000);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0080);

    write(0x0338, 0x0001);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0081);

    write(0x0338, 0x0002);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0082);

    write(0x0338, 0x0003);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0083);

    write(0x0338, 0x0004);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0084);

    write(0x0338, 0x0005);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0085);

    write(0x0338, 0x0006);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0086);

    write(0x0338, 0x0007);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0087);

    write(0x0338, 0x0008);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0088);

    write(0x0338, 0x0009);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0089);

    write(0x0338, 0x000a);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008a);

    write(0x0338, 0x000b);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008b);

    write(0x0338, 0x000c);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008c);

    write(0x0338, 0x000d);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008d);

    write(0x0338, 0x000e);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008e);

    write(0x0338, 0x000f);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008f);

    write(0x0338, 0x8200);                          // Enable Absorber
    write(0x0320, 0xf84a);                          // update phase from Dram refresh

    // Extend mode register 2: 1X refresh rate
    write(0x0304, 0x8000);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    write(0x0316, 0x1177);
    wait(1);

    // Extend mode register 3:
    write(0x0304, 0xc000);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    wait(1);

    // Extend mode register: DLL enable
    write(0x0304, 0x4000);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    wait(1);

    // mode register: burst length=4, CAS latency=6 , DLL reset
    // write(0x0304, 0x0f62);
    write(0x0304, 0x0162);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    wait(1);

    // mode register: burst length=4, CAS latency=6, DLL reset Off
    // write(0x0304, 0x0e62);
    write(0x0304, 0x0862);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0xc800);                          // turn off PD
    wait(1);

    // Extend mode register: OCD default
    write(0x0304, 0x43c0);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    wait(1);

    // Extend mode register: OCD exit
    write(0x0304, 0x4042);                          // odt 150 ohm
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0xc880);                          // turn off PD
    wait(1);

// ==============================================
//         Memory Setting for Etron DDR2
// ==============================================
} else {
    write(0x0348, 0xe002);                          // B0DTDQSI
    write(0x0334, 0x0000);                          // MCLKP Out Setting & MA &CMD
    write(0x0336, 0xc000);                          // ODT Enable & MDQS IO Driving
    write(0x0330, 0x8000);                          // IO Driving
    write(0x0332, 0x1400);                          // odt 150 ohm
    write(0x0396, 0xa000);                          // MAX GNT

    write(0x0338, 0x0000);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0080);

    write(0x0338, 0x0001);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0081);

    write(0x0338, 0x0002);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0082);

    write(0x0338, 0x0003);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0083);

    write(0x0338, 0x0004);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0084);

    write(0x0338, 0x0005);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0085);

    write(0x0338, 0x0006);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0086);

    write(0x0338, 0x0007);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0087);

    write(0x0338, 0x0008);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0088);

    write(0x0338, 0x0009);
    write(0x033a, 0x0f08);
    write(0x0338, 0x0089);

    write(0x0338, 0x000a);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008a);

    write(0x0338, 0x000b);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008b);

    write(0x0338, 0x000c);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008c);

    write(0x0338, 0x000d);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008d);

    write(0x0338, 0x000e);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008e);

    write(0x0338, 0x000f);
    write(0x033a, 0x0f08);
    write(0x0338, 0x008f);

    write(0x0338, 0x8200);                          // Enable Absorber
    write(0x0320, 0xf84a);                          // update phase from Dram refresh

    // Extend mode register 2: 1X refresh rate
    write(0x0304, 0x8000);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    write(0x0316, 0x1177);
    wait(1);

    // Extend mode register 3:
    write(0x0304, 0xc000);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    wait(1);

    // Extend mode register: DLL enable
    write(0x0304, 0x4000);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    wait(1);

    // mode register: burst length=4, CAS latency=6 , DLL reset
    // write(0x0304, 0x0f62);
    write(0x0304, 0x0162);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    wait(1);

    // mode register: burst length=4, CAS latency=6, DLL reset Off
    // write(0x0304, 0x0e62);
    write(0x0304, 0x0862);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0xc800);                          // turn off PD
    wait(1);

    // Extend mode register: OCD default
    write(0x0304, 0x43c0);
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0x8800);                          // turn off PD
    wait(1);

    // Extend mode register: OCD exit
    write(0x0304, 0x4042);                          // odt 150 ohm
    write(0x0308, 0x0800);                          // tune tRC for tref
    wait(1);
    write(0x0308, 0xc880);                          // turn off PD
    wait(1);
}

// Memory Priority Setting for Arbitration, original priority USB > ARM > RISC > AHB
write(0x0382, 0x100c);                              // swap the priority fo USB > AHB > RISC > ARM
write(0x0386, 0x110d);

// ==============================================
//           End of Memory Setting
// ==============================================

// ==============================================
// Setting to resume from RAM
// ==============================================
if (0) {                                            // turn it on if the suspend to RAM is supported
    if (read_mask(0x0000, 0x0003)!=0x0003) {        // booting mode
        if (read_mask(0xde50002c, 0x7e000000) != 0x02000000) {  // read the tag from RTC register
            write(0x0308, 0xc800);                  // exit self refresh
            wait(50*1000);                          // wait 50 ms
            goto(0x800001c0);                       // goto startup.S itpSuspendRestore function
        }
    }
}

// data(0x00000000, 1, ${CFG_LCD_CLEAR_FILESIZE}, ${CFG_LCD_CLEAR_FILESIZE}, "lcd_clear.bin");
data(0x00000000, 1, 172, 172, "lcd_clear.bin"); 

/* ************************************************* */
/*         IT9850, Enable DCLK Clock Setting         */
/* ************************************************* */
write(0x002A, 0x0022);

/* ************************************************** */
/* PLL3 810MHz, ck3_n1=30MHz, ck3_n2=30MHz FPS = 62Hz */
/* ************************************************** */
write(0x00C0, 0x400C);
write(0x00C2, 0x001B);
write(0x00C4, 0x232A);
write(0x00C4, 0x332A);
write(0x00C4, 0x232A);

write(0x0028, 0xC000);
//LCD reset
write(0x002A, 0x3022);
wait(500);
write(0x002A, 0x0022);
wait(500);

/* ************************************************* */
/*                  General Setting                  */
/* ************************************************* */
write(0x1100, 0x2000);
write(0x1102, 0x0A60); // Dst=RGB565, 24bit
write(0x1104, 0xE002); // DCLK falling Latch, Hsync Negative, Ysync Negative
write(0x1106, 0x0000); // SW flip, [1:0]: layer1 Buffer:A, [5:4]:Ui decompress Buffer B
write(0x1108, 0x0F00);
// write(0x110c, ${CFG_LCD_WIDTH});
write(0x110c, 480); // width
// write(0x110e, ${CFG_LCD_HEIGHT});
write(0x110e, 854); // height
// write(0x1110, ${CFG_LCD_PITCH});
write(0x1110, 960); // pitch
// write(0x1112, ${CFG_LCDA_ADDR} & 0xffff);
write(0x1112, 0x03DA7880 & 0xffff); // base
// write(0x1114, ${CFG_LCDA_ADDR} >> 16);
write(0x1114, 0x03DA7880 >> 16); // base

call(0x80000000);

/* boot DATA   start_addr  length  width   pitch  filename */
// data(${CFG_LCD_BOOT_BITMAP_ADDR}, ${CFG_LCD_BOOT_BITMAP_HEIGHT}, ${CFG_LCD_BOOT_BITMAP_WIDTH}, ${CFG_LCD_PITCH}, "bitmap.raw");
data(0x03E011D8, 90, 528, 960, "bitmap.raw");

/* ************************************************* */
/*              Hardware Cursor Setting              */
/* ************************************************* */
write(0x1120, 0x0000);
write(0x1138, 0x2000); //request threshold

/* ************************************************* */
/*                    CTG Setting                    */
/* ************************************************* */


// Interface Setting
write(0x1190, 0x0007);
write(0x1192, 0x020E);
write(0x1194, 0x038A);  

//Output HSync
write(0x11A0, 0x1000);
write(0x11A2, 0x0001);
write(0x11A4, 0x2004);
write(0x11A6, 0x0001);
write(0x11A8, 0x120A);
write(0x11AA, 0x0001);
write(0x11AC, 0x2000);
write(0x11AE, 0x0001);
//Output VSync
write(0x11B0, 0x5006);
write(0x11B2, 0x0000);
write(0x11B4, 0x2006);
write(0x11B6, 0x0001);
write(0x11B8, 0x1006);
write(0x11BA, 0x0388);
write(0x11BC, 0x2006);
write(0x11BE, 0x0000);
//Output DE
write(0x11C0, 0x1006);
write(0x11C2, 0x0012);
write(0x11C4, 0x21e6);
write(0x11C6, 0x0368);
write(0x11C8, 0x1006);
write(0x11CA, 0x0012);
write(0x11CC, 0x21E6);
write(0x11CE, 0x0368);  

/* ************************************************* */
/*                 Pin Share setting                 */
/* ************************************************* */
write(0x1258, 0x8000); // Enable IO output

write(0x8108, 0x4000); // 39, Mode1
write(0x810A, 0x5555); // 40~47, Mode1
write(0x810C, 0x5555); // 48~55, Mode1
write(0x810E, 0x1555); // 56~62, Mode1
write(0x8110, 0x0156); // 64, Mode2, 65~68, Mode1

/* ************************************************* */
/*                    Enable LCD                     */
/* ************************************************* */
write(0x111E, 0x0001); // Sync Fire
wait(500);             // 9850 unit: us
write(0x111E, 0x0003); // Display Fire

// delay 20ms then turn on backlight
if (read_mask(0x0002, 0xffff) == 0x9070) {
    wait(10000000);         // delay 10000000*3 CPU cycles on 9070
} else if (read_mask(0x0002, 0xffff) == 0x9910) {
    wait(10000000);         // delay 10000000*3 CPU cycles on 9910
} else {
    wait(20*10000);          // delay 16ms on P9850 or after project
}
//data(0x00000000, 1, CFG_BACKLIGHT_FILESIZE, CFG_BACKLIGHT_FILESIZE, "backlight.bin");
data(0x00000000, 1, 3040, 3040, "backlight.bin");
// call(CFG_BACKLIGHT_ENTRY_ADDR);
call(0x800007e8);

