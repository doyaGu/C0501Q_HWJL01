#ifndef ITP_SYS_FCNTL_H
#define ITP_SYS_FCNTL_H

#undef __STDC__
#define __STDC__ 1
#include <io.h>
#undef __STDC__
#define __STDC__ 0

#include "$ENV{CFG_VC_INC_PATH}/fcntl.h"
#include "lwip/sockets.h"

#ifdef __cplusplus
extern "C" {
#endif

#define	F_GETFD		1	/* Get fildes flags (close on exec) */
#define	F_SETFD		2	/* Set fildes flags (close on exec) */
#define	F_GETLK  	7	/* Get record-locking information */
#define	F_SETLK  	8	/* Set or Clear a record-lock (Non-Blocking) */
#define	F_SETLKW 	9	/* Set or Clear a record-lock (Blocking) */

#define	FD_CLOEXEC	1	/* posix */

#ifndef O_NONBLOCK
#define O_NONBLOCK  1 /* nonblocking I/O */
#endif

#define O_SYNC		0x2000	/* do all writes synchronously */
#define O_CLOEXEC	0x40000

#define	F_RDLCK		1	/* read lock */
#define	F_WRLCK		2	/* write lock */
#define	F_UNLCK		3	/* remove lock(s) */

struct flock {
	short	l_type;		/* F_RDLCK, F_WRLCK, or F_UNLCK */
	short	l_whence;	/* flag to choose starting offset */
	long	l_start;	/* relative offset, in bytes */
	long	l_len;		/* length, in bytes; 0 means lock to EOF */
	short	l_pid;		/* returned with F_GETLK */
	short	l_xxx;		/* reserved for future use */
};

int open(const char* name, int flags, ...);
int fcntl(int s, int cmd, int val);

#ifdef __cplusplus
}
#endif

#endif // ITP_SYS_FCNTL_H
